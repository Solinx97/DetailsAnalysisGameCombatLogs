// <auto-generated />
using System;
using CombatAnalysis.IdentityDAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CombatAnalysis.IdentityDAL.Migrations
{
    [DbContext(typeof(CombatAnalysisIdentityContext))]
    partial class CombatAnalysisIdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.AuthorizationCodeChallenge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeChallengeMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCodeChallenge");
                });

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = "client1",
                            ClientName = "web",
                            ClientType = "public",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5271), new TimeSpan(0, 1, 0, 0, 0)),
                            RedirectUrl = "encounters.analysis.com/callback",
                            Scope = "client1scope",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5325), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "client2",
                            ClientName = "desktop",
                            ClientType = "public",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5328), new TimeSpan(0, 1, 0, 0, 0)),
                            RedirectUrl = "localhost:45571/callback",
                            Scope = "client2scope",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5329), new TimeSpan(0, 1, 0, 0, 0))
                        },
                        new
                        {
                            Id = "client3",
                            ClientName = "devWeb",
                            ClientType = "public",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5331), new TimeSpan(0, 1, 0, 0, 0)),
                            RedirectUrl = "localhost:44479/callback",
                            Scope = "client3scope",
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 21, 19, 56, 8, 165, DateTimeKind.Unspecified).AddTicks(5333), new TimeSpan(0, 1, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.ResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetToken");
                });

            modelBuilder.Entity("CombatAnalysis.IdentityDAL.Entities.VerifyEmailToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VerifyEmailToken");
                });
#pragma warning restore 612, 618
        }
    }
}
