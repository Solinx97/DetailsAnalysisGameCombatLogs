pipeline {
    agent any

    parameters {
        string defaultValue: "/Build/development", name: "BUILD_PIPELINE_NAME"
        string defaultValue: "./src/CombatAnalysis.WebApp/CombatAnalysis.WebApp.csproj", name: "PROJECT_PATH"
        string defaultValue: "./tests/CombatAnalysis.Parser.Tests/CombatAnalysis.Parser.Tests.csproj", name: "TEST_PROJECT_PATH"
        string defaultValue: "./src/CombatAnalysis.WebApp/Dockerfile", name: "PROJECT_DOCKER_PATH"
        string defaultValue: "solinx", name: "DOCKER_HUB_LOGIN"
        string defaultValue: "", name: "DOCKER_IMAGE_NAME"
        string defaultValue: "latest", name: "DOCKER_IMAGE_VERSION"
    }

    stages {
        stage("Build") {
            steps {
                script {
                    def buildResult = build job: BUILD_PIPELINE_NAME, parameters: [
                        string(name: "PROJECT_PATH", value: PROJECT_PATH),
                        string(name: "TEST_PROJECT_PATH", value: TEST_PROJECT_PATH),
                    ], propagate: false
                    if (buildResult.result == 'SUCCESS') {
                        echo "Build successful, proceeding to Docker image build"
                    } else {
                        error "Build failed, aborting pipeline"
                    }
                }
            }
        }
        stage("Docker image build") {
            steps {
                bat "docker build -t ${DOCKER_HUB_LOGIN}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION} -f ${PROJECT_DOCKER_PATH} ."
            }
        }
        stage("Docker image push") {
            steps {
                withCredentials([string(credentialsId: "docker-hub", variable: "dockerhubpwd")]) {
                    bat "docker login -u ${DOCKER_HUB_LOGIN} -p ${dockerhubpwd}"
                    bat "docker push ${DOCKER_HUB_LOGIN}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}"
                }
            }
        }
    }
}
