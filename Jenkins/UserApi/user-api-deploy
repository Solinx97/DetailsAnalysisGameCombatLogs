pipeline {
    agent any

    parameters {
        string defaultValue: "lucid-diode-391208", name: "CREDENTIALS_ID"
        string defaultValue: "lucid-diode-391208", name: "PROJECT_ID"
        string defaultValue: "combat-analysis-cluster", name: "CLUSTER_NAME"
        string defaultValue: "us-central1", name: "LOCATION"
        string defaultValue: "combat-analysis-user-api", name: "DOCKER_IMAGE"
        string defaultValue: "latest", name: "DOCKER_IMAGE_VERSION"
        string defaultValue: "solinx", name: "DOCKER_HUB_LOGIN"
        string defaultValue: "user-api", name: "RELEASE_NAME"
    }

    environment {
        PROJECT_ID = "${PROJECT_ID}"
        CLUSTER_NAME = "${CLUSTER_NAME}"
        LOCATION = "${LOCATION}"
        CREDENTIALS_ID = "${CREDENTIALS_ID}"
    }

    stages {
        stage("Build") {
            steps {
                bat "dotnet restore src/API/CombatAnalysis.UserApi/CombatAnalysis.UserApi.csproj"
                bat "dotnet build src/API/CombatAnalysis.UserApi/CombatAnalysis.UserApi.csproj"
            }
        }
        stage("Test") {
            steps {
                bat "dotnet test tests/CombatAnalysis.Parser.Tests/CombatAnalysis.Parser.Tests.csproj"
            }
        }
        stage("Docker image build") {
            steps {
                bat "docker build -f src/API/CombatAnalysis.UserApi/Dockerfile --force-rm -t ${DOCKER_HUB_LOGIN}/${DOCKER_IMAGE}:${DOCKER_IMAGE_VERSION} ."
            }
        }
        stage("Docker image push") {
            steps {
                withCredentials([string(credentialsId: "docker-hub", variable: "dockerhubpwd")]) {
                    bat "docker login -u ${DOCKER_HUB_LOGIN} -p ${dockerhubpwd}"
                    bat "docker push ${DOCKER_HUB_LOGIN}/${DOCKER_IMAGE}:${DOCKER_IMAGE_VERSION}"
                }
            }
        }
        stage("Deploy to GKE") {
            steps{
                withCredentials([file(credentialsId: "google-cloud-key", variable: "googleCloudKey")]) {
                    bat "gcloud auth activate-service-account --key-file=${googleCloudKey}"
                    bat "gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${LOCATION} --project ${PROJECT_ID}"
                    bat "helm upgrade ${RELEASE_NAME} -i Deploy/GoogleCloud/Chart/ --set container.image=${DOCKER_IMAGE}:${DOCKER_IMAGE_VERSION}"
                }
            }
        }
    }
}
